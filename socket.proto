syntax = "proto3";
package pb.socket;

// 对外服数据协议包装
message ExternalMessage {
  // 请求命令类型: 0 心跳，1 业务
  int32 cmdCode = 1;
  // 协议开关，用于一些协议级别的开关控制，比如 安全加密校验等。 : 0 不校验
  int32 protocolSwitch = 2;
  // 业务路由（高16为主, 低16为子）
  int32 cmdMerge = 3;
  // 响应码。从字段精简的角度，我们不可能每次响应都带上完整的异常信息给客户端排查问题，因此，我们会定义一些响应码，通过编号进行网络传输，方便客户端定位问题。0:成功!=0: 表示有错误
  int32 responseStatus = 4;
  // 验证信息
  string validMsg = 5;
  bytes data = 6;

}

// 单个房间信息
message PlayroomList {
  // 房间列表map
  map<int32,PlayroomInfo> longPlayroomInfoMap = 1;

}

// 用户创建房间请求
message UserCreateRoom {
  // 房间名
  string roomName = 1;
  // 最大人数
  int32 playerCount = 2;

}

// 用户信息响应
message UserInfo {
  // id
  int64 id = 1;
  // 用户昵称
  string name = 2;
  // jwt
  string jwt = 3;

}

// {classComment}
message UserJoin {
  string username = 1;
  int64 roomid = 2;

}

// {classComment}
message UserSearch {
  string username = 1;
  string roomname = 2;

}

// 测试spring消息连通
message HelloSpringMsg {
  string name = 1;

}

// {classComment}
message UserCreate {
  string username = 1;
  string roomname = 2;

}

// 房间创建信息
message PlayroomInfo {
  // 房间ID
  int32 roomId = 1;
  // 房间名
  string roomName = 2;
  // 创建者ID
  int64 primaryuserID = 3;
  // 房间最大人数
  int32 playerMaxCount = 4;
  // 房间当前人数
  int32 playerCount = 5;

}

// 用户登录请求
message UserLogin {
  // 邮箱
  string email = 1;
  // 密码
  string password = 2;

}

